{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/Navbar/Navbar.tsx","App.tsx","pages/Home.tsx","components/Loader/Loader.tsx","components/PersonLink/PersonLinl.tsx","components/PersonRow/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","api.ts","pages/People.tsx","pages/NotFound.tsx","index.tsx"],"names":["PageNavLink","to","title","className","isActive","classNames","Navbar","role","App","Home","Loader","PersonLink","person","slug","sex","name","PersonRow","born","died","mother","motherName","father","fatherName","useParams","personSlug","PeopleTable","people","map","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","People","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","peopleFromServer","peopleToDisplay","find","somebody","catch","finally","length","NotFound","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.a33e1ca2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype TProps = {\n  to: string;\n  title: string;\n};\n\nexport const PageNavLink: React.FC<TProps> = ({ to, title }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        {\n          'has-background-grey-lighter': isActive,\n        },\n      )}\n    >\n      {title}\n    </NavLink>\n  );\n};\n","import { PageNavLink } from '../PageNavLink';\n\nexport const Navbar: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink\n            to=\"/\"\n            title=\"Home\"\n          />\n\n          <PageNavLink\n            to=\"/people\"\n            title=\"People\"\n          />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const Home = () => <h1 className=\"title\">Home Page</h1>;\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport { Person } from '../../types';\n\ntype TProps = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<TProps> = ({ person }) => (\n  <Link\n    to={`../${person.slug}`}\n    className={classNames({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype TProps = {\n  person: Person;\n};\n\nexport const PersonRow: React.FC<TProps> = ({ person }) => {\n  const {\n    slug,\n    sex,\n    born,\n    died,\n    mother,\n    motherName,\n    father,\n    fatherName,\n  } = person;\n  const { personSlug } = useParams();\n\n  const isActive = personSlug === slug;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': isActive,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../../types';\nimport { PersonRow } from '../PersonRow';\n\ntype TProps = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<TProps> = ({ people }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRow person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\n\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\n\nimport { getPeople } from '../api';\n\nimport { Person } from '../types';\n\nexport const People = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromServer => {\n        const peopleToDisplay = peopleFromServer\n          .map(person => ({\n            ...person,\n            mother: peopleFromServer.find(\n              somebody => somebody.name === person.motherName,\n            ),\n            father: peopleFromServer.find(\n              somebody => somebody.name === person.fatherName,\n            ),\n          }));\n\n        setPeople(peopleToDisplay);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!isLoading && !isError && !people.length && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {people.length > 0 && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFound = () => <h1 className=\"title\">Page not found</h1>;\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { Home } from './pages/Home';\nimport { People } from './pages/People';\nimport { NotFound } from './pages/NotFound';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<Home />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\">\n            <Route index element={<People />} />\n            <Route path=\":personSlug\" element={<People />} />\n          </Route>\n          <Route path=\"*\" element={<NotFound />} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}